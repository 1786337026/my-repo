# 并发基本概念

## 进程、线程

* 进程是程序在操作系统中的一次执行过程    (执行的实例 .exe)    ,系统进行资源分配和调度的一个独立单位,

  包含程序代码、当前活动的状态、程序的指令、寄存器和进程使用的所有资源（如内存、文件句柄等）。

  简单来说就是计算机一系列行动的综合，程序的主体。

* 线程是进程的一个执行实体,是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位。

  * 比如读和写就是两个线程

## 并行和并发

* 并发是多个线程交替操作同一资源类
* 并行是多个线程同时操作多个资源类

# 协程goroutine

## 协程基本概念

协程是单线程下的并发，轻量级的线程 独立的栈空间 

## go下的协程

* 主线程和协程会同时进行，若主线程结束运行协程无论是否执行完毕都会结束运行

  可以用time包里的Sleep函数

  ```go
  time.Sleep(time.second * 1)
  ```

  

* 并发多协程（量级高的话）会出现资源竞争的情况

## 资源竞争的解决方法

### sync.Mutex 互斥锁

* 全局变量定义一个锁

```go
var lock sync.Mutex
func funcname( ) {
    lock.Lock()
    
    lock.Unlock()
}
func main() {
    go funcname()
    
}
```

* 弊端：不太好判断和预测要执行多长时间

### channel 通道

* 本质是队列
* 定义：

```go
var Intchan chan int
//channel就是一种数据结构，也可以使用结构体
Intchan = make (chan int ,6)
```

* 操作：

```go
[channame]<- //添加操作
<-[channame] //读出操作
len([channame]) //缓冲区数据个数
cap([channame]) //缓冲区大小
close([channame])
defer close([channame])
//关闭管道
// 用完一定要记得关闭管道
```

* channel缓冲区

  缓冲区满了就需要等待

  可以用容量为一的管道实现互斥锁

  

  